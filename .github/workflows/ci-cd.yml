# Nome do seu workflow, que aparecerá na aba "Actions" do GitHub
name: Deploy Aplicacao Spring no AWS EC2

# Define quando o workflow deve ser executado
on:
  push:
    branches:
      - main  # Altere para a sua branch principal se for diferente (ex: master)

# Variáveis de ambiente que podem ser usadas em todo o workflow
env:
  # ATENÇÃO: Altere estes valores para os da sua conta
  AWS_REGION: us-east-1                  # Ex: us-east-1, sa-east-1
  ECR_REPOSITORY: shortener-app          # O nome do seu repositório no ECR

jobs:
  build-and-deploy:
    name: Build e Deploy
    runs-on: ubuntu-latest # O workflow será executado em uma máquina virtual Linux

    steps:
      # Passo 1: Baixar o código do seu repositório para a máquina virtual
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Configurar as credenciais da AWS na máquina virtual
      # Ele usa os secrets que você configurou no repositório do GitHub
      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # Essencial para contas de lab
          aws-region: ${{ env.AWS_REGION }}

      # Passo 3: Fazer login no Amazon ECR (repositório de imagens Docker da AWS)
      - name: Fazer login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Passo 4: Construir a imagem Docker, taguear e enviar para o ECR
      - name: Construir, Taguear e Enviar imagem para o ECR
        id: build-image
        env:
          # Pega o endereço do registro do passo anterior (login-ecr)
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Cria uma tag para a imagem usando o ID do commit (ex: 1a2b3c4)
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Constrói a imagem Docker
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Envia a imagem para o ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Salva o nome completo da imagem para usar no próximo passo
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Passo 5: Conectar na instância EC2 via SSH e executar o deploy
      - name: Deploy na Instância EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_IP }}
          username: ec2-user # Altere se o usuário da sua instância for outro (ex: ubuntu)
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # --- Início do Script de Deploy na EC2 (Plano B) ---

            echo "=> Configurando credenciais da AWS na instância EC2..."
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set aws_session_token ${{ secrets.AWS_SESSION_TOKEN }}
            aws configure set region ${{ env.AWS_REGION }}

            echo "=> Fazendo login no ECR a partir da instância EC2..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            echo "=> Baixando a nova imagem do ECR: ${{ steps.build-image.outputs.image }}"
            docker pull ${{ steps.build-image.outputs.image }}

            echo "=> Parando e removendo o container antigo, se existir..."
            docker stop shortener_app || true
            docker rm shortener_app || true

            echo "=> Iniciando o novo container..."
            docker run -d --name shortener_app \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/shortenerdb \
              -e SPRING_DATASOURCE_USERNAME=admin \
              -e SPRING_DATASOURCE_PASSWORD=1234 \
              ${{ steps.build-image.outputs.image }}

            echo "=> Deploy finalizado com sucesso!"
