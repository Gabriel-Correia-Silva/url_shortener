name: CI/CD Pipeline for URL Shortener

on:
  push:
    branches:
      - main

jobs:
  # --- Job para o Back-end ---
  build-and-push-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # Use um secret para a região

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          # Usa o nome do repositório ECR a partir dos secrets
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          # Pega a URL do registro do passo de login e usa 'latest' como tag
          IMAGE_TAG: latest
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG -f shortener_url_java_spring/shortener_url_java_spring/Dockerfile ./shortener_url_java_spring/shortener_url_java_spring
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # --- Job para o Front-end ---
  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build frontend
        run: |
          cd front_end
          npm install
          npm run build

      - name: Deploy to S3
        run: |
          aws s3 sync ./front_end/dist s3://${{ secrets.S3_BUCKET_FRONTEND }} --delete

# --- Job para Deploy do Back-end (Exemplo para EC2) ---
  deploy-backend:
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          # Pega a URL da imagem construída no job anterior
          ECR_IMAGE: ${{ needs.build-and-push-backend.outputs.image }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            # Faz login no ECR a partir da instância EC2 (requer que a EC2 tenha a role correta)
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            # Puxa a imagem mais recente do ECR
            docker pull "${{ env.ECR_IMAGE }}"
            
            # Para e remove o container antigo, se existir
            docker stop shortener_app || true
            docker rm shortener_app || true
            
            # Inicia o novo container
            docker run -d --name shortener_app \
              -p 8080:8080 \
              --network shortener_network \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/shortenerdb \
              -e SPRING_DATASOURCE_USERNAME=admin \
              -e SPRING_DATASOURCE_PASSWORD=1234 \
              "${{ env.ECR_IMAGE }}"
          EOF